generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String           @id @default(uuid())
  token                   String           @unique
  animalSelection         String
  email                   String?          @unique
  tokenBalance            Int              @default(100)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  loginAttempts           Int              @default(0)
  lastLoginAttempt        DateTime?
  orderId                 Int              @unique @default(autoincrement())
  isEmailVerified         Boolean          @default(false)
  lastIpAddress           String?
  lastTokenRotation       DateTime         @default(now())
  lastUserAgent           String?
  status                  UserStatus       @default(ACTIVE)
  statusReason            String?
  statusUpdatedAt         DateTime         @default(now())
  statusUpdatedBy         String?
  tokenVersion            Int              @default(1)
  verificationToken       String?          @unique
  verificationTokenExpiry DateTime?
  loginHistory            Json?            @default("[]")
  statusHistory           Json?            @default("[]")
  chats                   Chat[]
  userPreferences         UserPreferences?
  payments                Payment[]

  @@index([email])
  @@index([status])
  @@index([verificationToken])
}

model UserPreferences {
  id               String   @id @default(uuid())
  userId           String   @unique
  currentLanguage  String   @default("en")
  isSidebarPinned  Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  languageHistory  Json?    @default("[]")
  userAgentHistory Json?    @default("[]")
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Chat {
  id            String    @id @default(uuid())
  title         String
  titleUpdated  Boolean   @default(false)
  userId        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  model         String    @default("o1-mini")
  provider      String    @default("openai")
  modelCodeName String    @default("o1-mini")
  role          String    @default("user")
  orderId       Int       @unique @default(autoincrement())
  metadata      Json?     @default("{}")
  modelKey      String?
  appId         Int       @default(1)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      Message[]

  @@index([userId])
}

model Message {
  id           String        @id @default(uuid())
  content      String
  role         String
  chatId       String
  createdAt    DateTime      @default(now())
  type         type          @default(TEXT)
  contentData  Json?
  format       String?
  fileMetadata FileMetadata?
  chat         Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model FileMetadata {
  id               String   @id @default(uuid())
  messageId        String   @unique
  fileName         String
  fileType         String
  fileSize         Int
  uploadDate       DateTime @default(now())
  contentSummary   String?
  processingStatus String   @default("pending")
  analysisResult   Json?
  message          Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Payment {
  id               String        @id @default(uuid())
  userId           String
  type             PaymentType   @default(TOKEN_PURCHASE)
  packageName      String?
  amount           Float
  tokenAmount      Int
  currency         String        @default("usd")
  paymentMethod    String?
  previousBalance  Int
  expectedBalance  Int
  finalBalance     Int?
  stripeSessionId  String?       @unique
  paymentIntentId  String?       @unique
  stripeCustomerId String?
  status           PaymentStatus @default(PENDING)
  error            String?
  errorCode        String?
  ipAddress        String?
  userAgent        String?
  countryCode      String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  completedAt      DateTime?
  expiresAt        DateTime?
  metadata         Json?         @default("{}")
  notes            String?
  refundReason     String?
  refundForId      String?
  refundFor        Payment?      @relation("RefundRelation", fields: [refundForId], references: [id])
  refunds          Payment[]     @relation("RefundRelation")
  user             User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@index([stripeSessionId])
  @@map("payments")
}

model Inapp {
  appId   Int     @id @default(autoincrement())
  appName String
  appType String?
  appUrl  String?
}

enum UserStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentType {
  TOKEN_PURCHASE
  SUBSCRIPTION
  REFUND
  OTHER
}

enum type {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  HTML
  FORMATTED_DATA
}
